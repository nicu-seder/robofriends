{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","cardComponent","robots","map","element","key","SearchBox","searchChange","type","aria-describedby","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","errorInfo","this","setState","React","Component","App","onSearchChange","event","searchField","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"4SAgBeA,G,iBAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACrB,OACQ,yBAAKC,UAAU,wDACX,yBAAKC,IAAG,+BAA0BJ,EAA1B,iBAA6CK,IAAI,WACzD,6BACI,4BAAKJ,GACL,2BAAIC,OCcTI,EAnBE,SAAC,GAAc,IACtBC,EADqB,EAAZC,OACcC,KAAI,SAACC,GAC/B,OACI,kBAAC,EAAD,CACIC,IAAG,UAAKD,EAAQV,GAAb,YAAmBU,EAAQT,KAA3B,YAAmCS,EAAQR,OAC9CF,GAAIU,EAAQV,GACZC,KAAMS,EAAQT,KACdC,MAAOQ,EAAQR,WAI1B,OACI,6BACKK,ICDEK,EAdG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKV,UAAU,OACX,2BACIH,GAAG,OACHG,UAAU,mCACVW,KAAK,SACLC,mBAAiB,YACjBC,YAAY,gBACZC,SAAUJ,MCDXK,G,MARA,SAACC,GACZ,OACE,yBAAKC,MAAO,CAACC,UAAU,SAAUC,OAAO,kBAAkBC,OAAO,UAC5DJ,EAAMK,YCkBDC,E,kDArBZ,WAAYN,GAAQ,IAAD,8BACf,cAAMA,IACDO,MAAQ,CACTC,UAAS,GAHE,E,8DAODC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAIxB,OAAIG,KAAKJ,MAAMC,SAET,0CAGCG,KAAKX,MAAMK,a,GAlBCQ,IAAMC,WCkDlBC,E,kDAzCX,WAAYf,GAAQ,IAAD,8BACf,cAAMA,IAYVgB,eAAiB,SAACC,GACd,EAAKL,SAAS,CAACM,YAAaD,EAAME,OAAOC,SAZzC,EAAKb,MAAQ,CACTlB,OAAQ,GACR6B,YAAa,IAJF,E,gEAQE,IAAD,OAChBG,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAAQF,MAAK,SAAAG,GAAK,OAAI,EAAKb,SAAS,CAACvB,OAAQoC,S,+BAQrH,IAAD,OACCC,EAAiBf,KAAKJ,MAAMlB,OAAOsC,QAAO,SAACC,GAC7C,OAAOA,EAAM9C,KAAK+C,cAAcC,SAAS,EAAKvB,MAAMW,gBAExD,OAAiC,IAA7BP,KAAKJ,MAAMlB,OAAO0C,OAEd,wBAAI/C,UAAU,MAAd,WAGJ,yBAAKA,UAAU,MACX,wBAAIA,UAAU,mBAAd,eACA,kBAAC,EAAD,CAAWU,aAAciB,KAAKK,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU3B,OAAQqC,W,GAhCxBb,IAAMC,WCEJkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDwHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAtC,GACLuC,QAAQvC,MAAMA,EAAMwC,c","file":"static/js/main.f72d9e89.chunk.js","sourcesContent":["import React from \"react\";\r\nimport 'tachyons'\r\nimport './Card.css'\r\n\r\nconst Card = ({id, name, email}) => {\r\n    return (\r\n            <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 '>\r\n                <img src={`https://robohash.org/${id}?size=200x200`} alt='robots'/>\r\n                <div>\r\n                    <h3>{name}</h3>\r\n                    <p>{email}</p>\r\n                </div>\r\n            </div>\r\n    );\r\n};\r\n\r\nexport default Card;","import React from \"react\";\r\nimport 'tachyons'\r\nimport Card from \"./Card\";\r\n\r\n\r\nconst CardList = ({robots}) => {\r\n    const cardComponent = robots.map((element)=>{\r\n       return(\r\n           <Card\r\n               key={`${element.id}-${element.name}-${element.email}`}\r\n               id={element.id}\r\n               name={element.name}\r\n               email={element.email}/>\r\n       ) ;\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            {cardComponent}\r\n        </div>\r\n\r\n    )\r\n};\r\n\r\nexport default CardList","import React from \"react\";\r\n\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input\r\n                id=\"name\"\r\n                className=\"pa3 ba b--green bg-lightest-blue\"\r\n                type=\"search\"\r\n                aria-describedby=\"name-desc\"\r\n                placeholder='search robots'\r\n                onChange={searchChange}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default SearchBox;","import React from \"react\";\r\nimport './Scroll.css';\r\n\r\nconst Scroll = (props)=>{\r\n    return (\r\n      <div style={{overflowY:'scroll', border:'1px solid black',height:'800px' }}>\r\n          {props.children}\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React from 'react'\r\n\r\nclass ErrorBoundry extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError:false\r\n        };\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        this.setState({hasError:true});\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError){\r\n            return(\r\n              <h1>Error here</h1>\r\n            );\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport  default ErrorBoundry;","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundry from \"../components/ErrorBoundry\";\n\n// import {robots} from \"./robots\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            robots: [],\n            searchField: ''\n        };\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(users => this.setState({robots: users}))\n    };\n\n\n    onSearchChange = (event) => {\n        this.setState({searchField: event.target.value});\n    };\n\n    render() {\n        const filteredRobots = this.state.robots.filter((robot) => {\n            return robot.name.toLowerCase().includes(this.state.searchField);\n        });\n        if (this.state.robots.length === 0) {\n            return (\n                <h1 className='f1'>Loading</h1>\n            );\n        } else return (\n            <div className='tc'>\n                <h1 className='h1-component f1'>ROBOFRIENDS</h1>\n                <SearchBox searchChange={this.onSearchChange}/>\n                <Scroll>\n                    <ErrorBoundry>\n                        <CardList robots={filteredRobots}/>\n                    </ErrorBoundry>\n                </Scroll>\n\n            </div>\n\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}